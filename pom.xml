<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github</groupId>
	<artifactId>whale-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	
	<description>whale</description>

	<developers>
		<developer>
			<name>weiguangyue</name>
			<email>weiyue888999@126.com</email>
		</developer>
	</developers>

	<properties>
		<java.version>1.8</java.version>
		<maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.6</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  		<junit.version>4.12</junit.version>
		<slf4j.version>1.7.9</slf4j.version>
		<log4j.version>2.3</log4j.version>
		<junit.version>4.12</junit.version>
	</properties>
	

	<modules>
		<module>whale-common</module>
		<module>whale-register</module>
		<module>whale-web-server</module>
		<module>whale-data-server</module>
		<module>whale-doc</module>
	</modules>
	
	<!-- 依赖组件版本管理 -->
	<dependencyManagement>
		<dependencies>
			<!--log4j2依赖包-->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>${log4j.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j.version}</version>
				<scope>provided</scope>
			</dependency>
			<!--log4j2与slf4j的桥接依赖-->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>
				<version>${log4j.version}</version>
				<scope>provided</scope>
			</dependency>
			<!--slf4j依赖包-->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet.api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
					<include>**/*.css</include>
					<include>**/*.html</include>
					<include>**/*.js</include>
					<include>**/*.txt</include>
					<include>**/*.png</include>
					<include>**/*.html</include>
				</includes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
					<include>**/*.css</include>
					<include>**/*.html</include>
					<include>**/*.js</include>
					<include>**/*.txt</include>
					<include>**/*.png</include>
					<include>**/*.html</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>
	    <plugins>
	        <plugin>
	            <groupId>org.apache.maven.plugins</groupId>
	            <artifactId>maven-compiler-plugin</artifactId>
	            <configuration>
	                <source>1.6</source>
	                <target>1.6</target>
	            </configuration>
	        </plugin>
		    <!-- 源码插件:发布时自动将源码同时发布 -->				
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-source-plugin</artifactId>
				 <version>3.0.1</version> 
				 <!-- 打包source文件为jar文件 -->
				 <configuration>
				 	 <!-- 打包源码一起发布到maven仓库中 -->
	                    <attach>true</attach>
	                </configuration> 
				 <executions>
					 <execution>
						 <id>attach-sources</id>
						 <phase>package</phase>
						 <goals>
						 	<!-- 
							 	jar-no-fork与jar的区别
								jar，在执行goal之前，执行generate-sources阶段，也就是说，如果，jar绑定的目标在generate-sources之后(比如verify)的话，generate-sources会执行两遍。
								jar-no-fork，没有其余动作，在绑定的phase执行。
							 -->
							<!-- <goal>jar</goal> -->
							<goal>jar-no-fork</goal>
						 </goals>
					 </execution>
				 </executions>
			</plugin>
	    </plugins>
	</build>
</project>
